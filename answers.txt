Group Members: Aaron Sun, Karthik Ravichandran
Questions:
1. One good practice satisfied by triangle project is already having an initial test suite which can be extended to further tests if needed. Another good practice is already having set up tools to run test statistics such as decision coverage, statement coverage, and mutation detection rate. 
2. The initial statement coverage is 65% for the isTriangle.py file. The intial decision coverage is 53% for the isTriangle.py file. Finally, the mutation detection rate is 23.1%. 
3. Yes, my approach differed between the two cases, since the mutation cases generally required more inclusion of edge case tests with small differences between numbers (e.g. barely not satisfying the triangle inequality), whereas for the statement coverage it didn't matter how close it was as long as it still resulted in the same case.
4. For a program, some mutatants are undetectable because their outputs are identical to the original program and they don't make any functional difference for the code.
5. The mutation detection rate decreased from 90.4% to 0%. In contrast, decision coverage and statement coverage remained the same at 100% since the amount of code remains the same across all tests even if we don't verify the outputs of the program.
6. I can define "test case redundancy" as test cases which don't increase code coverage or mutatant detection rate. Given this definition, some of my tests are redundant, as they may be testing statements which are already being covered or mutatants which are already being killed. However, these should not be removed, even if they are redundat, because it's possible that they may detect bugs when the intial program is extended to other things which are initally not important or include edge cases which can become relevant when the program is modified.
7. In the normative cases, I saw 6 decision points for scalene triangles (1, 4, 6, 8, 10, 11), 6 points for equilateral triangles (1, 4, 6, 8, 10, 14), and 9 for isosceles triangles (1, 4, 6, 8, 10, 14, 16, 18, 20). In the exceptional cases, I saw 1 for invalid sides (1) and 10 for triangle inequality violations (1, 4, 6, 8, 10, 11, 14, 16, 18, 20). This was helpful for creating a better test suite as I saw how I should try to cover each of these decision points by creating cases for each of these normative and exceptional outcomes.


